name: Makefile CI

on:
  pull_request:
  push:

jobs:
  publish_release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get the latest tag
      id: get_latest_tag
      run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

    - name: Generate version number
      id: version
      run: |
        LATEST_TAG=${LATEST_TAG:-'0.0.0'}
        IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_TAG"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        if [ "$PATCH" -lt 9 ]; then
          PATCH=$((PATCH + 1))
        else
          PATCH=0
          MINOR=$((MINOR + 1))
        fi

        echo "VERSION=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
        draft: false
        prerelease: false

    - name: Delete old releases
      run: |
        # Get the list of releases
        releases=$(gh api repos/${{ github.repository }}/releases --paginate --jq '.[] | {id: .id, tag_name: .tag_name} | @base64')

        # Decode the base64 encoded releases list
        decode() { echo "$1" | base64 --decode; }

        # Collect release IDs and tags
        ids=()
        tags=()
        for release in $releases; do
          release_decoded=$(decode "$release")
          id=$(echo $release_decoded | jq -r '.id')
          tag_name=$(echo $release_decoded | jq -r '.tag_name')
          ids+=($id)
          tags+=($tag_name)
        done

        # Calculate the threshold index
        threshold_index=$(( ${#ids[@]} - 30 ))

        # Delete releases older than the threshold
        if [ $threshold_index -gt 0 ]; then
          for (( i=0; i<$threshold_index; i++ )); do
            gh api repos/${{ github.repository }}/releases/${ids[$i]} -X DELETE
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
